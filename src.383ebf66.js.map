{"version":3,"sources":["../src/EZElement.ts","../src/ez.ts","../src/EZDiv.ts","../src/EZSpan.ts","../src/index.ts","../src/EZButton.ts","../src/EZTextInput.ts","../src/InternalShadow.ts","../src/EZShadowElement.ts","../src/extractStyleContents.ts","node_modules/code-prettify/src/run_prettify.js","src/shared/SourceCode.ts","src/shadow-example/list/FilterableStaticList.ts","src/shadow-example/list/ShadowListChild.ts","src/shadow-example/ShadowExample.ts","src/shared/ExampleHolder.ts","src/shadow-example/ShadowExampleWrapper.ts","src/shared/StatusElement.ts","src/button-example/ButtonExample.ts","src/button-example/ButtonExampleWrapper.ts","../src/JSX.ts","src/jsx-example/JSXExample.tsx","src/jsx-example/JSXExampleWrapper.tsx","src/ez-button-example/EZButtonExample.ts","src/ez-button-example/EZButtonExampleWrapper.ts","src/ez-button-subclass-example/ToggleIconTextButton.ts","src/ez-button-subclass-example/EZButtonSubclassExample.ts","src/ez-button-subclass-example/EZButtonSubclassExampleWrapper.ts","src/ez-textinput-example/EZTextInputExample.ts","src/ez-textinput-example/EZTextInputExampleWrapper.ts","src/basic-ezelements/BasicEZElementsExample.ts","src/basic-ezelements/BasicEZElementsExampleWrapper.ts","src/index.tsx"],"names":[],"mappings":"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","file":"src.383ebf66.js","sourceRoot":"..","sourcesContent":["/** @internal */\nexport type NativeElement = keyof HTMLElementTagNameMap;\n\n/** @internal */\nexport type AnyEZElement = EZElement<NativeElement>;\n\ntype Appendable =\n  | AppendableArray\n  | { element: HTMLElement }\n  | AnyEZElement\n  | HTMLElement\n  | string;\n\ninterface AppendableArray extends Array<Appendable> {}\n\n/** @internal */\nexport class EZElement<K extends NativeElement> {\n  private element: HTMLElementTagNameMap[K];\n\n  // By default any child elements will be added to the element itself.\n  // Having a separate reference to the child container allows overriding\n  // this behaviour and creating a \"holder\".\n  private childContainer: DocumentFragment | HTMLElement;\n\n  constructor(arg: K | HTMLElementTagNameMap[K]) {\n    if (typeof arg === 'string') {\n      this.element = document.createElement(arg);\n    } else {\n      this.element = arg as HTMLElementTagNameMap[K];\n    }\n    this.childContainer = this.element;\n\n    this.setAttribute('data-class-name', this.constructor.name);\n  }\n\n  //region Meta\n  public getNativeElement(): HTMLElementTagNameMap[K] {\n    return this.element;\n  }\n\n  public getChildContainer(): DocumentFragment | HTMLElement {\n    return this.childContainer;\n  }\n\n  public static unwrapEZElement(el: AnyEZElement | HTMLElement): HTMLElement {\n    if (EZElement.isEZElement(el)) {\n      return el.getNativeElement();\n    }\n    return el;\n  }\n\n  // @ts-ignore - used in internal runtime type check\n  private isEZElement(): boolean {\n    return true;\n  }\n\n  public static isEZElement(el: any): el is AnyEZElement {\n    return Boolean(\n      el &&\n        el.__proto__ &&\n        el.__proto__.isEZElement &&\n        el.__proto__.isEZElement()\n    );\n  }\n\n  //endregion\n\n  //region Override Child Container\n  public setChildContainer(\n    childContainer: DocumentFragment | HTMLElement\n  ): this {\n    if (\n      !(\n        childContainer instanceof DocumentFragment ||\n        childContainer instanceof HTMLElement\n      )\n    ) {\n      throw new Error(\n        'child container must be a DocumentFragment or a HTMLElement'\n      );\n    }\n    this.childContainer = childContainer;\n    return this;\n  }\n\n  //endregion\n\n  //region Child diffing\n  public applyChildren(\n    wrappedChildren: Array<\n      AnyEZElement | HTMLElement | { element: HTMLElement } | string\n    >\n  ): this {\n    const nativeElement = this.childContainer;\n    const children = wrappedChildren.map(EZElement.toAppendable);\n    const childrenSet = new Set(children);\n\n    // Determine which of the desired children are not yet in the element and add them to a\n    // fragment that will be appended in a single operation.\n    const existingElementChildren = new Set(\n      Array.from(nativeElement.childNodes)\n    );\n    const notYetPresentChildren = children.filter(child => {\n      return !existingElementChildren.has(child);\n    });\n    const frag = document.createDocumentFragment();\n    frag.append(...notYetPresentChildren);\n    nativeElement.prepend(frag);\n\n    // Determine which of the existing children are not in the desired state of the element.\n    const existingChildren = Array.from(nativeElement.childNodes);\n    const removingChildren = existingChildren.filter(\n      child => !childrenSet.has(child as HTMLElement)\n    );\n\n    // Add the children that should be removed from the element to\n    // a new fragment (which removes them from the existing element)\n    document.createDocumentFragment().append(...removingChildren);\n\n    // Avoid the unintended side-effect of the removed children\n    // being part of the unattached document fragment\n    for (const child of removingChildren) {\n      child.remove();\n    }\n\n    let previousChild: ChildNode | null = null;\n    let nextChild = nativeElement.firstChild;\n    // enforce the order that the children were passed with\n    for (let i = 0; i < children.length; i++) {\n      const expectedNode = children[i];\n      if (expectedNode !== nextChild) {\n        if (previousChild === null) {\n          nativeElement.prepend(expectedNode);\n        } else {\n          previousChild.after(expectedNode);\n        }\n      }\n      previousChild = expectedNode;\n      nextChild = expectedNode.nextSibling;\n    }\n\n    return this;\n  }\n\n  //endregion\n\n  //region append/prepend\n  public append(...children: AppendableArray): this {\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.append(...child);\n      } else {\n        this.childContainer.append(EZElement.toAppendable(child));\n      }\n    }\n    return this;\n  }\n\n  public prepend(...children: AppendableArray): this {\n    for (const child of children.reverse()) {\n      if (Array.isArray(child)) {\n        this.prepend(...child);\n      } else {\n        this.childContainer.prepend(EZElement.toAppendable(child));\n      }\n    }\n    return this;\n  }\n\n  //endregion\n\n  //region placement\n  public appendTo(parent: AnyEZElement | HTMLElement): this {\n    parent.append(this.element);\n    return this;\n  }\n\n  public prependTo(parent: AnyEZElement | HTMLElement): this {\n    parent.prepend(this.element);\n    return this;\n  }\n\n  public replaceWith(other: AnyEZElement | HTMLElement): this {\n    this.element.replaceWith(EZElement.unwrapEZElement(other));\n    return this;\n  }\n\n  public removeFromParent(): this {\n    const parent = this.element.parentNode;\n    if (parent) {\n      parent.removeChild(this.element);\n    }\n    return this;\n  }\n\n  //endregion\n\n  //region Parent\n  public getParent(): Node & ParentNode | null {\n    return this.element.parentNode;\n  }\n\n  //endregion\n\n  //region Children\n  public getChild(index: number): ChildNode | null {\n    return this.childContainer.childNodes[index] || null;\n  }\n\n  public getChildren(): Array<ChildNode> {\n    return Array.from(this.childContainer.childNodes);\n  }\n\n  public contains(node: Node | AnyEZElement | null): boolean {\n    if (EZElement.isEZElement(node)) {\n      return this.element.contains(node.element);\n    }\n    return this.element.contains(node);\n  }\n\n  //endregion\n\n  //region Classes\n  public addClass(...classNames: Array<string>): this {\n    this.element.classList.add(...classNames);\n    return this;\n  }\n\n  public setClasses(classObj: { [key: string]: boolean }): this {\n    Object.entries(classObj).forEach(([className, enabled]) => {\n      if (enabled) {\n        this.addClass(className);\n      } else {\n        this.removeClass(className);\n      }\n    });\n    return this;\n  }\n\n  public removeClass(...classNames: Array<string>): this {\n    this.element.classList.remove(...classNames);\n    return this;\n  }\n\n  public get classList(): DOMTokenList {\n    return this.element.classList;\n  }\n\n  //endregion\n\n  //region Style\n  public addStyles(styles: Partial<CSSStyleDeclaration>): this {\n    Object.assign(this.style, styles);\n    return this;\n  }\n\n  public get style(): CSSStyleDeclaration {\n    return this.element.style;\n  }\n\n  //endregion\n\n  //region Attributes\n  public addAttributes(attributes: { [key: string]: string }): this {\n    Object.entries(attributes).forEach(([key, value]) => {\n      this.setAttribute(key, value);\n    });\n    return this;\n  }\n\n  public setAttribute(attrName: string, val: string): this {\n    this.element.setAttribute(attrName, val);\n    return this;\n  }\n\n  public removeAttribute(attrName: string): this {\n    this.element.removeAttribute(attrName);\n    return this;\n  }\n\n  public get attributes(): NamedNodeMap {\n    return this.element.attributes;\n  }\n\n  public getAttribute(attrName: string): string | null {\n    return this.element.getAttribute(attrName);\n  }\n\n  //endregion\n\n  //region Events\n  public addEventListener<K extends keyof HTMLElementEventMap>(\n    type: K,\n    listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): this {\n    this.element.addEventListener(type, listener, options);\n    return this;\n  }\n\n  public removeEventListener<K extends keyof HTMLElementEventMap>(\n    type: K,\n    listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): this {\n    this.element.removeEventListener(type, listener, options);\n    return this;\n  }\n\n  public isEventTarget(event: Event): boolean {\n    return event.target === this.element;\n  }\n\n  public containsEventTarget(event: Event): boolean {\n    if (this.isEventTarget(event)) {\n      return true;\n    }\n    return this.contains(event.target as Node | null);\n  }\n\n  public onClick(cb: (event: MouseEvent) => void): this {\n    return this.addEventListener('click', cb);\n  }\n\n  //endregion\n\n  //region TextContent\n  public setTextContent(text: string): this {\n    this.element.textContent = text;\n    return this;\n  }\n\n  public getTextContent(): string | null {\n    return this.element.textContent;\n  }\n\n  //endregion\n\n  private static toAppendable(\n    child: AnyEZElement | HTMLElement | { element: HTMLElement } | string\n  ): Text | HTMLElement {\n    if (EZElement.isEZElement(child)) {\n      return child.element;\n    } else if (child instanceof HTMLElement) {\n      return child;\n    } else if (typeof child === 'string') {\n      return document.createTextNode(child);\n    } else if (child && child.element !== undefined) {\n      return child.element;\n    } else {\n      throw new Error('Unrecognized child argument');\n    }\n  }\n}\n","import { EZElement, NativeElement } from './EZElement';\n\n/** @internal */\n\ntype ClassArg = string | Array<string> | { [key: string]: boolean };\n\nexport function ez<T extends NativeElement>(\n  arg: T | HTMLElementTagNameMap[T] | EZElement<T>,\n  classes?: ClassArg\n): EZElement<T> {\n  let instance: EZElement<T>;\n  if (EZElement.isEZElement(arg)) {\n    instance = arg;\n  } else {\n    instance = new EZElement(arg);\n  }\n  if (classes !== undefined) {\n    if (Array.isArray(classes)) {\n      instance.addClass(...classes);\n    } else if (typeof classes === 'string') {\n      instance.addClass(classes);\n    } else {\n      instance.setClasses(classes);\n    }\n  }\n  return instance;\n}\n","import { EZElement } from './EZElement';\n\n/** @internal */\nexport class EZDiv extends EZElement<'div'> {\n  constructor() {\n    super('div');\n  }\n}\n","import { EZElement } from './EZElement';\n\n/** @internal */\nexport class EZSpan extends EZElement<'span'> {\n  constructor() {\n    super('span');\n  }\n}\n","export * from './ez';\nexport * from './EZElement';\nexport { EZDiv } from './EZDiv';\nexport { EZSpan } from './EZSpan';\n","import { EZElement } from '@ez-elements/core';\n\n/** @internal */\nexport class EZButton extends EZElement<'button'> {\n  constructor(cb: () => void) {\n    super('button');\n    this.onClick(cb);\n  }\n\n  disable() {\n    this.setAttribute('disabled', 'disabled');\n    return this;\n  }\n\n  enable() {\n    this.removeAttribute('disabled');\n    return this;\n  }\n}\n","import { EZElement } from '@ez-elements/core';\n\n/** @internal */\nexport class EZTextInput extends EZElement<'input'> {\n  constructor(cb: (value: string) => void) {\n    super('input');\n\n    this.setAttribute('type', 'text').addEventListener('input', () => {\n      cb(this.getValue());\n    });\n  }\n\n  public getValue(): string {\n    return this.getNativeElement().value;\n  }\n\n  public setValue(value: string, callChangedCallback: boolean = true): this {\n    this.getNativeElement().value = value;\n    if (callChangedCallback) {\n      this.getNativeElement().dispatchEvent(new Event('input'));\n    }\n    return this;\n  }\n}\n","export interface ShadowLifeCycleListener {\n  connected(): void;\n  disconnected(): void;\n}\n\n// Use a subclass of HTMLElement as the root element to capture lifecycle callbacks.\n// To avoid common issues with transpilers erasing class / new keywords that are\n// required for standard web component usage, use Reflect.construct and direct\n// prototype definition.\nfunction InternalShadowImpl() {\n  const instance = Reflect.construct(\n    HTMLElement,\n    [],\n    this.__proto__.constructor\n  );\n  instance.root = instance.attachShadow({ mode: 'open' });\n  instance.append(instance.root);\n  return instance;\n}\nInternalShadowImpl.prototype.setLifeCycleListener = function(\n  lifecycleListener: ShadowLifeCycleListener\n) {\n  this.lifecycleListener = lifecycleListener;\n  return this;\n};\nInternalShadowImpl.prototype.getShadowRoot = function() {\n  return this.root;\n};\nInternalShadowImpl.prototype.connectedCallback = function() {\n  this.lifecycleListener.connected();\n};\nInternalShadowImpl.prototype.disconnectedCallback = function() {\n  this.lifecycleListener.disconnected();\n};\nObject.setPrototypeOf(InternalShadowImpl.prototype, HTMLElement.prototype);\nObject.setPrototypeOf(InternalShadowImpl, HTMLElement);\n\ndeclare class IInternalShadow extends HTMLElement {\n  constructor();\n  setLifeCycleListener(lifecycleListener: ShadowLifeCycleListener): this;\n  getShadowRoot(): ShadowRoot;\n}\n\ninterface InternalShadowClass {\n  new (): IInternalShadow;\n}\n\nexport const InternalShadow = (InternalShadowImpl as unknown) as InternalShadowClass;\nexport type InternalShadow = IInternalShadow;\n\nconst global = Function('return this')();\n\n// A tag is required for a custom HTMLElement. If the element is not registered then the instance will not be\n// constructable. If the customElements global is not defined then only throw the error if a construction is attempted\nexport let didRegisterCustomElement = false;\nif (global.customElements) {\n  // The internal shadow element will be visible as 'ez-shadow' in the DOM\n  global.customElements.define('ez-shadow', InternalShadow);\n  didRegisterCustomElement = true;\n}\n","import { EZElement, NativeElement } from '@ez-elements/core';\nimport { didRegisterCustomElement, InternalShadow } from './InternalShadow';\n\n/** @internal */\nexport class EZShadowElement<K extends NativeElement> extends EZElement<\n  keyof HTMLElementTagNameMap\n> {\n  private styleElement: HTMLStyleElement;\n  private onConnectedCallbacks: Array<() => void> = [];\n  private onDisconnectedCallbacks: Array<() => void> = [];\n\n  constructor(type: K) {\n    super(new InternalShadow());\n\n    const element = this.getNativeElement() as InternalShadow;\n    element.setLifeCycleListener({\n      connected: () => {\n        this.connected();\n      },\n      disconnected: () => {\n        this.disconnected();\n      }\n    });\n    const shadowRoot = element.getShadowRoot();\n\n    this.styleElement = document.createElement('style');\n    shadowRoot.append(this.styleElement);\n\n    const container = new EZElement(type);\n    const containerElement = container.getNativeElement();\n    shadowRoot.append(containerElement);\n\n    this.setChildContainer(containerElement);\n  }\n\n  public onConnected(cb: () => void): this {\n    this.onConnectedCallbacks.push(cb);\n    return this;\n  }\n\n  public onDisconnected(cb: () => void): this {\n    this.onDisconnectedCallbacks.push(cb);\n    return this;\n  }\n\n  public setShadowStyle(styleContents: string): this {\n    this.styleElement.innerHTML = styleContents;\n    return this;\n  }\n\n  private connected() {\n    this.onConnectedCallbacks.forEach(cb => {\n      cb();\n    });\n  }\n\n  private disconnected() {\n    this.onDisconnectedCallbacks.forEach(cb => {\n      cb();\n    });\n  }\n}\n\nif (!didRegisterCustomElement) {\n  module.exports = {\n    EZShadowElement: function() {\n      throw new Error(\n        'customElements was not available so the custom element used by EZShadowElement cannot be constructed. This can occur if the environment does not support custom elements (either an old browser or a test environment that does not include support for custom elements)'\n      );\n    }\n  };\n}\n","/** @internal */\nexport function extractStyleContents(html: string): string {\n  const sheet = document.createElement('div');\n  sheet.innerHTML = html;\n  const firstChild = sheet.childNodes[0];\n  if (\n    sheet.childNodes.length !== 1 ||\n    !(firstChild instanceof HTMLStyleElement)\n  ) {\n    throw new Error(\n      'extractStyleContents was not called with a single <style></style> html string'\n    );\n  }\n  return sheet.childNodes[0].textContent!;\n}\n","/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<NAME>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<NAME>.css\".          |        |\n * |                  |               | https://cdn.rawgit.com/      |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Exmaples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://cdn.rawgit.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|Node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|Node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n* </dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.rawgit.com/google/code-prettify/master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    \n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n    \n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n    \n    \n    var HACK_TO_FIX_JS_INCLUDE_PL;\n    \n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n    \n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    window['PR_SHOULD_USE_CONTINUATION'] = true;\n    \n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n    \n    \n    (function () {\n      var win = window;\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n          \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n          \"yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n    \n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n    \n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n    \n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n    \n      \n      \n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * <p>Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * <p>The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n      \n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n    \n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n      \n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n      \n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n      \n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n      \n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n      \n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n      \n          var out = ['['];\n          if (inverse) { out.push('^'); }\n      \n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n      \n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n      \n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n      \n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n      \n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n      \n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n      \n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n      \n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n      \n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n      \n          return parts.join('');\n        }\n      \n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n      \n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n    \n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n      \n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n      \n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n      \n        walk(node);\n      \n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n    \n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n    \n      var notWs = /\\S/;\n    \n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n    \n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n    \n        var nPatterns = fallthroughStylePatterns.length;\n    \n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n    \n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n    \n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n    \n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n    \n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n    \n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n    \n            var tokenStart = pos;\n            pos += token.length;\n    \n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n    \n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n    \n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n    \n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n    \n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n    \n        var punctuation =\n          // The Bash man page says\n    \n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n    \n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n    \n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo {#}\n          // {#}\n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n    \n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n    \n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n    \n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n    \n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n    \n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n    \n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n    \n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n      \n        var document = node.ownerDocument;\n      \n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n      \n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n      \n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n      \n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n      \n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n      \n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n      \n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n      \n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n      \n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n      \n        node.appendChild(ol);\n      }\n    \n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n      \n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n      \n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n      \n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n      \n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n      \n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n      \n        nDecorations = decorations.length = decPos;\n      \n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n      \n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n      \n            var end = Math.min(spanEnd, decEnd);\n      \n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n      \n            sourceIndex = end;\n      \n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n    \n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n    \n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n    \n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n    \n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n    \n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n    \n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n    \n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n    \n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n    \n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n    \n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n    \n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n    \n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n    \n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n    \n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n    \n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n    \n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n    \n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n    \n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n    \n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n    \n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n    \n        doWork();\n      }\n    \n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint': prettyPrint =\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n    \n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n","import { ez, EZDiv } from 'ez-elements';\n\n// include the file in the code-prettyify package that adds the functions\n// to the window so that they can be invoked after pre tags are added\n// after page load.\nrequire('../../node_modules/code-prettify/src/run_prettify');\n\nconst inactiveTabBackgroundColor = '#BBB';\nconst inactiveTabColor = 'black';\nconst activeTabBackgroundColor = '#DDD';\nconst activeTabColor = 'blue';\n\nexport function SourceCode(files: { [key: string]: string }) {\n  const contentHolder = ez('div');\n\n  let currentTab: EZDiv | null = null;\n  const tabs: Array<EZDiv> = [];\n  Object.entries(files).forEach(([fileName, contents]) => {\n    const tab = ez('div')\n      .addStyles({\n        border: '1px solid black',\n        borderBottom: 'none',\n        cursor: 'pointer',\n        padding: '5px',\n        color: inactiveTabColor,\n        backgroundColor: inactiveTabBackgroundColor\n      })\n      .setTextContent(fileName)\n      .onClick(() => {\n        if (currentTab) {\n          currentTab.addStyles({\n            color: inactiveTabColor,\n            backgroundColor: inactiveTabBackgroundColor\n          });\n        }\n        currentTab = tab;\n        tab.addStyles({\n          color: activeTabColor,\n          backgroundColor: activeTabBackgroundColor\n        });\n        contentHolder.applyChildren([\n          ez('pre', 'prettyprint')\n            .setTextContent(contents)\n            .addStyles({\n              margin: '0',\n              border: '1px solid black'\n            })\n        ]);\n        prettyPrintCode();\n      });\n    tabs.push(tab);\n  });\n\n  if (tabs.length > 0) {\n    tabs[0].getNativeElement().dispatchEvent(new MouseEvent('click'));\n  }\n\n  return ez('div').append(\n    ez('div')\n      .addStyles({\n        display: 'flex'\n      })\n      .append(\n        ez('div')\n          .addStyles({\n            padding: '5px',\n            display: 'inline-block',\n            fontWeight: 'bold'\n          })\n          .setTextContent('Source'),\n        tabs\n      ),\n    contentHolder\n  );\n}\n\nfunction prettyPrintCode() {\n  setTimeout(() => {\n    // Trigger the prettyprinting of pre tags using code-prettify\n    (window as any).PR.prettyPrint();\n  }, 0);\n}\n","import {\n  AnyEZElement,\n  extractStyleContents,\n  ez,\n  EZButton,\n  EZDiv,\n  EZShadowElement,\n  EZTextInput\n} from 'ez-elements';\n\nconst textInputClassName = 'text-input';\nconst holderClassName = 'holder';\n\n// Use a style tag to enable IDE-highlighting - the css string must be without the tag so it is stripped\n// using extractStyleContents.\nconst css = extractStyleContents(`<style>\n  :host {\n    border: 1px solid blue;\n    background-color: orange;\n    display: block;\n  }\n  .${textInputClassName} {\n    margin: 10px;\n    padding: 5px;\n    color: orange;\n  }\n  .${holderClassName} {\n    padding: 10px;\n  }\n</style>`);\n\nexport type ListChild = AnyEZElement & {\n  getQueryText: () => string;\n};\n\nexport class FilterableStaticList extends EZShadowElement<'div'> {\n  private input: EZTextInput;\n  private holder: EZDiv;\n  private children: Array<ListChild> = [];\n  private filter: string = '';\n\n  constructor() {\n    super('div');\n\n    this.setShadowStyle(css).append(\n      (this.input = new EZTextInput(value => {\n        this.applyFilter(value);\n      }).addClass(textInputClassName)),\n      ez('div').append(\n        new EZButton(() => {\n          this.input.setValue('1');\n        }).setTextContent('Set to \"1\"'),\n        new EZButton(() => {\n          this.input.setValue('2');\n        }).setTextContent('Set to \"2\"')\n      ),\n\n      (this.holder = new EZDiv().addClass(holderClassName))\n    );\n  }\n\n  public setChildren(children: Array<ListChild>): this {\n    this.children = children;\n    this.applyFilter(this.filter);\n    return this;\n  }\n\n  private applyFilter(filter: string) {\n    this.filter = filter;\n    const lowercaseFilter = filter.toLowerCase();\n    const filteredChildren = this.children.filter((child: ListChild) => {\n      return (\n        child\n          .getQueryText()\n          .toLowerCase()\n          .indexOf(lowercaseFilter) !== -1\n      );\n    });\n\n    this.holder.applyChildren(filteredChildren);\n  }\n}\n","import { ListChild } from './FilterableStaticList';\nimport { extractStyleContents, EZShadowElement, EZSpan } from 'ez-elements';\n\nconst css = extractStyleContents(`<style>\n  :host {\n      color: red;\n  }\n</style>`);\n\n// Simple div with a classname from the list implementation class file\nexport class ShadowListChild extends EZShadowElement<'div'>\n  implements ListChild {\n  private text: string;\n  private span: EZSpan;\n  private disconnects: number = 0;\n  private connects: number = 0;\n\n  constructor(text: string) {\n    super('div');\n    this.text = text;\n\n    this.setShadowStyle(css).append((this.span = new EZSpan()));\n\n    this.onConnected(() => {\n      this.connects++;\n      this.render();\n    });\n\n    this.onDisconnected(() => {\n      this.disconnects++;\n      this.render();\n    });\n\n    this.render();\n  }\n\n  getQueryText(): string {\n    return this.text;\n  }\n\n  private render() {\n    this.span.setTextContent(\n      `${this.text} - connects: ${this.connects} - disconnects: ${this.disconnects}`\n    );\n  }\n}\n","import { ez } from 'ez-elements';\nimport { FilterableStaticList } from './list/FilterableStaticList';\nimport { ShadowListChild } from './list/ShadowListChild';\n\nexport function ShadowExample() {\n  return ez('div').append(\n    new FilterableStaticList().setChildren(createChildren())\n  );\n}\n\nfunction createChildren() {\n  const children = [];\n  for (let i = 1; i <= 30; i++) {\n    children.push(new ShadowListChild(i.toString(10)));\n  }\n  return children;\n}\n","import { AnyEZElement, ez } from 'ez-elements';\n\nexport function ExampleHolder(element: AnyEZElement) {\n  return ez('div').append(\n    ez('div')\n      .addStyles({\n        padding: '5px',\n        display: 'inline-block',\n        fontWeight: 'bold'\n      })\n      .setTextContent('Example'),\n    ez('div')\n      .addStyles({\n        border: '1px solid black',\n        marginBottom: '10px',\n        padding: '10px'\n      })\n      .append(element)\n  );\n}\n","import { ez, EZDiv } from 'ez-elements';\nimport { SourceCode } from '../shared/SourceCode';\nimport { readFileSync } from 'fs';\nimport { ShadowExample } from './ShadowExample';\nimport { ExampleHolder } from '../shared/ExampleHolder';\n\nexport function ShadowExampleWrapper(holder: EZDiv) {\n  holder.append(\n    ez('h3').setTextContent('Shadow (WebComponents)'),\n    ez('p').append(\n      'Source shows how to subclass ',\n      ez('code').append('EZShadowElement'),\n      ' to create components that have separate CSS rules and lifecycle callbacks.'\n    ),\n\n    ExampleHolder(ShadowExample()),\n\n    SourceCode({\n      'ShadowExample.ts': readFileSync(\n        __dirname + '/ShadowExample.ts',\n        'utf-8'\n      ),\n      'FilterableStaticList.ts': readFileSync(\n        __dirname + '/list/FilterableStaticList.ts',\n        'utf-8'\n      ),\n      'ShadowListChild.ts': readFileSync(\n        __dirname + '/list/ShadowListChild.ts',\n        'utf-8'\n      )\n    })\n  );\n}\n","import { extractStyleContents, ez, EZDiv, EZShadowElement } from 'ez-elements';\n\nconst enabledClassName = 'enabled';\nconst style = extractStyleContents(`<style>\n  :host {\n    border: 1px solid black;\n    background-color: red;\n    display: block;\n    padding: 5px;\n  }\n  :host(.${enabledClassName}) {\n    background-color: green;\n    color: white;\n  }\n</style>`);\n\nexport class StatusElement extends EZShadowElement<'div'> {\n  private status: EZDiv;\n\n  constructor(private enabled: boolean = false) {\n    super('div');\n\n    this.setShadowStyle(style)\n      .append((this.status = ez('div')))\n      .render();\n  }\n\n  disable(): this {\n    this.enabled = false;\n    this.render();\n    return this;\n  }\n\n  enable(): this {\n    this.enabled = true;\n    this.render();\n    return this;\n  }\n\n  render(): this {\n    this.status.setTextContent(this.enabled ? 'Enabled' : 'Disabled');\n    this.setClasses({\n      [enabledClassName]: this.enabled\n    });\n    return this;\n  }\n}\n","import { ez } from 'ez-elements';\nimport { StatusElement } from '../shared/StatusElement';\n\nexport function ButtonExample() {\n  let statusElement: StatusElement;\n\n  return ez('div').append(\n    (statusElement = new StatusElement(false)),\n    ez('button')\n      .setTextContent('Enable')\n      .onClick(() => {\n        statusElement.enable();\n      }),\n\n    ez('button')\n      .setTextContent('Disable')\n      .onClick(() => {\n        statusElement.disable();\n      })\n  );\n}\n","import { ez, EZDiv } from 'ez-elements';\nimport { SourceCode } from '../shared/SourceCode';\nimport { readFileSync } from 'fs';\nimport { ExampleHolder } from '../shared/ExampleHolder';\nimport { ButtonExample } from './ButtonExample';\n\nexport function ButtonExampleWrapper(holder: EZDiv) {\n  holder.append(\n    ez('h3').setTextContent('Simple <button/> elements'),\n    ez('p').append(\n      'Source shows how to create ',\n      ez('code').append('<button/>'),\n      ' elements using the ',\n      ez('code').append('ez(\"button\")'),\n      ' function.'\n    ),\n\n    ExampleHolder(ButtonExample()),\n\n    SourceCode({\n      'ButtonExample.ts': readFileSync(__dirname + '/ButtonExample.ts', 'utf-8')\n    })\n  );\n}\n","import { AnyEZElement, EZElement } from '@ez-elements/core';\n\ntype Constructable<T, A> = {\n  new (attributes: A): T;\n};\n\ntype JSXChild = { element: HTMLElement } | AnyEZElement | HTMLElement | string;\n\n/** @internal */\nexport class JSX {\n  static createElement<T extends keyof HTMLElementTagNameMap, A extends {}>(\n    arg:\n      | T\n      | ((attributes: A) => T)\n      | Constructable<HTMLElementTagNameMap[T] | EZElement<T>, A>,\n    attributes?: A,\n    ...children: Array<JSXChild>\n  ): EZElement<T> {\n    let el: EZElement<T>;\n    if (typeof arg === 'function') {\n      const constructed = new (arg as any)(attributes);\n      if (EZElement.isEZElement(constructed)) {\n        el = constructed as EZElement<T>;\n      } else {\n        el = new EZElement(constructed);\n      }\n    } else {\n      el = new EZElement(arg);\n      if (attributes !== undefined && attributes !== null) {\n        Object.entries(attributes).forEach(([attrName, attrVal]) => {\n          if (attrName === 'style' && typeof attrVal !== 'string') {\n            el.addStyles(attrVal as Partial<CSSStyleDeclaration>);\n          } else if (attrName === 'onClick') {\n            el.onClick(attrVal as () => void);\n          } else {\n            el.setAttribute(attrName, attrVal as string);\n          }\n        });\n      }\n    }\n    el.append(...children);\n    return el;\n  }\n}\n","import * as EZJSX from '@ez-elements/jsx';\nimport { AnyEZElement, EZDiv, EZElement } from 'ez-elements';\n\n// \"jsx\": \"react\", in tsconfig.json means that JSX tags are transformed into\n// React.createElement calls.\nconst React = EZJSX.JSX;\n\nexport function JSXExample() {\n  const ezElementDiv = new EZElement('div').addStyles({color: 'green'}).setTextContent('ezElementDiv');\n  let clickDiv: AnyEZElement;\n  let reactDiv;\n  let nestedDiv;\n  let someComplex;\n  let simpleDiv;\n\n  const outputElement = (<div>\n    <div style={'background-color: red;'}><span>style string div</span></div>\n    <div style={{backgroundColor: 'green'}}>style object div</div>\n    {clickDiv = <div onClick={() => {\n      clickDiv.append(' - clicked')\n    }}>clickDiv</div>}\n    {reactDiv = React.createElement('div', {style: 'color: red;'})}\n    {simpleDiv = <div className={'some-class'} style={{'color': 'orange'}}>simpleDiv</div>}\n    {ezElementDiv}\n    {nestedDiv = new EZElement('div').addStyles({color: 'blue'}).setTextContent('nestedDiv')}\n    {someComplex = <SomeComplex text={\"foo\"}/>}\n    {SFC({content: 'invoked explicitly'}).addStyles({color: 'violet'})}\n    <SFC content={'as JSX attrs'}/>\n  </div>);\n\n  reactDiv.setTextContent(\"This was reactDiv\");\n  simpleDiv.append(\" - simpleDiv.modified\");\n  nestedDiv.append(' - nestedDiv.modified');\n  someComplex.addStyles({color: 'indigo'}).append(' - SomeComplex.modified');\n\n  return outputElement;\n}\n\nclass SomeComplex extends EZDiv {\n  constructor(props: { text: string }) {\n    super();\n    this.setTextContent(`SomeComplex with text arg: ${props.text}`);\n  }\n}\n\nfunction SFC(props: { content: string }) {\n  return <div>I'm a SFC: {props.content}</div>;\n}\n","import * as EZJSX from 'ez-elements';\nimport { ez, EZDiv } from 'ez-elements';\nimport { SourceCode } from \"../shared/SourceCode\";\nimport { readFileSync } from \"fs\";\nimport { JSXExample } from \"./JSXExample\";\nimport { ExampleHolder } from \"../shared/ExampleHolder\";\n\nconst React = EZJSX.JSX;\n\nexport function JSXExampleWrapper(holder: EZDiv) {\n  holder.append(\n    ez('h3').setTextContent('JSX'),\n    ez('p').append('JSX can be used to construct and append EZElements.'),\n\n    ExampleHolder(JSXExample()),\n\n    SourceCode({\n      'JSXExample.tsx': readFileSync(__dirname + '/JSXExample.tsx', 'utf-8'),\n    }),\n  );\n}\n","import { ez, EZButton } from 'ez-elements';\nimport { StatusElement } from '../shared/StatusElement';\n\nexport function EZButtonExample() {\n  let statusElement: StatusElement;\n\n  return ez('div').append(\n    (statusElement = new StatusElement(false)),\n    new EZButton(() => {\n      statusElement.enable();\n    }).append(\n      ez('div').setTextContent('✅'),\n      ez('div').setTextContent('Enable')\n    ),\n\n    new EZButton(() => {\n      statusElement.disable();\n    }).append(\n      ez('div').setTextContent('🔴'),\n      ez('div').setTextContent('Disable')\n    )\n  );\n}\n","import { ez, EZDiv } from 'ez-elements';\nimport { SourceCode } from '../shared/SourceCode';\nimport { readFileSync } from 'fs';\nimport { ExampleHolder } from '../shared/ExampleHolder';\nimport { EZButtonExample } from './EZButtonExample';\n\nexport function EZButtonExampleWrapper(holder: EZDiv) {\n  holder.append(\n    ez('h3').setTextContent('EZButton instances'),\n    ez('p').append(\n      'Source shows how to use ',\n      ez('code').append('EZButton'),\n      ' instances to create buttons.'\n    ),\n\n    ExampleHolder(EZButtonExample()),\n\n    SourceCode({\n      'EZButtonExample.ts': readFileSync(\n        __dirname + '/EZButtonExample.ts',\n        'utf-8'\n      )\n    })\n  );\n}\n","import { ez, EZButton, EZElement } from 'ez-elements';\n\ntype ToggleIconTextButtonProps = {\n  activeIcon: string;\n  activeText: string;\n  inactiveIcon: string;\n  inactiveText: string;\n};\n\nexport class ToggleIconTextButton extends EZButton {\n  private props: ToggleIconTextButtonProps;\n  private icon: EZElement<'div'>;\n  private text: EZElement<'div'>;\n\n  constructor(\n    props: ToggleIconTextButtonProps,\n    cb: (active: boolean) => void,\n    private active: boolean = false\n  ) {\n    super(() => {\n      this.setActive(!this.active);\n      cb(this.active);\n    });\n    this.props = props;\n\n    this.append((this.icon = ez('div')), (this.text = ez('div')));\n    this.setActive(this.active);\n  }\n\n  setActive(active: boolean) {\n    this.active = active;\n\n    if (this.active) {\n      this.icon.setTextContent(this.props.activeIcon);\n      this.text.setTextContent(this.props.activeText);\n    } else {\n      this.icon.setTextContent(this.props.inactiveIcon);\n      this.text.setTextContent(this.props.inactiveText);\n    }\n  }\n}\n","import { ez } from 'ez-elements';\nimport { ToggleIconTextButton } from './ToggleIconTextButton';\nimport { StatusElement } from '../shared/StatusElement';\n\nexport function EZButtonSubclassExample() {\n  const statusElement = new StatusElement(false);\n\n  return ez('div').append(\n    statusElement,\n\n    new ToggleIconTextButton(\n      {\n        activeIcon: '👍',\n        activeText: 'Enabled',\n        inactiveIcon: '👎',\n        inactiveText: 'Disabled'\n      },\n      (active: boolean) => {\n        if (active) {\n          statusElement.enable();\n        } else {\n          statusElement.disable();\n        }\n      },\n      false\n    )\n  );\n}\n","import { ez, EZDiv } from 'ez-elements';\nimport { SourceCode } from '../shared/SourceCode';\nimport { readFileSync } from 'fs';\nimport { ExampleHolder } from '../shared/ExampleHolder';\nimport { EZButtonSubclassExample } from './EZButtonSubclassExample';\n\nexport function EZButtonSubclassExampleWrapper(holder: EZDiv) {\n  holder.append(\n    ez('h3').setTextContent('EZButton Subclass'),\n    ez('p').append(\n      'Source shows how to extend ',\n      ez('code').append('EZButton'),\n      ' to create more complex buttons.'\n    ),\n\n    ExampleHolder(EZButtonSubclassExample()),\n\n    SourceCode({\n      'EZButtonSubclassExample.ts': readFileSync(\n        __dirname + '/EZButtonSubclassExample.ts',\n        'utf-8'\n      ),\n      'ToggleIconTextButton.ts': readFileSync(\n        __dirname + '/ToggleIconTextButton.ts',\n        'utf-8'\n      )\n    })\n  );\n}\n","import { ez, EZElement, EZTextInput } from 'ez-elements';\n\nexport function EZTextInputExample() {\n  let textInput: EZTextInput;\n  let statusElement: EZElement<'div'>;\n\n  return ez('div').append(\n    (textInput = new EZTextInput((newValue: string) => {\n      statusElement.setTextContent(`Input value: ${newValue}`);\n    })),\n    (statusElement = ez('div')),\n    ez('button')\n      .setTextContent('Set to \"Foo\"')\n      .onClick(() => {\n        textInput.setValue('Foo');\n      }),\n\n    ez('button')\n      .setTextContent('Set to \"Bar\" without change callback')\n      .onClick(() => {\n        textInput.setValue('Bar', false);\n      })\n  );\n}\n","import { ez, EZDiv } from 'ez-elements';\nimport { SourceCode } from '../shared/SourceCode';\nimport { readFileSync } from 'fs';\nimport { ExampleHolder } from '../shared/ExampleHolder';\nimport { EZTextInputExample } from './EZTextInputExample';\n\nexport function EZTextInputExampleWrapper(holder: EZDiv) {\n  holder.append(\n    ez('h3').setTextContent('EZTextInput'),\n    ez('p').append(\n      ez('code').append('EZTextInput'),\n      ' is a thin wrapper around an ',\n      ez('code').append('<input type=\"text\"/>'),\n      'that simplifies getting and setting values'\n    ),\n\n    ExampleHolder(EZTextInputExample()),\n\n    SourceCode({\n      'EZTextInputExample.ts': readFileSync(\n        __dirname + '/EZTextInputExample.ts',\n        'utf-8'\n      )\n    })\n  );\n}\n","import { ez, EZDiv, EZElement, EZSpan } from 'ez-elements';\n\nexport function BasicEZElementsExample() {\n  return ez('div').append(\n    new EZElement('div').setTextContent(\n      'Constructed using new EZElement(\"div\")'\n    ),\n\n    ez('div').setTextContent('Constructed using ez(\"div\")'),\n\n    new EZDiv().setTextContent('Constructed using new EZDiv()'),\n\n    new EZSpan().setTextContent('Constructed using new EZSpan()'),\n\n    ez('p').setTextContent(\n      'All instances are EZElements so they have convenience functions available for appending/prepending etc.'\n    ),\n\n    new EZElement('div').append(\n      ez('div').append(\n        new EZDiv().append(\n          new EZSpan().setTextContent('span within some nested divs')\n        ),\n        ez('span').setTextContent('You can append EZElements to EZElements'),\n\n        (() => {\n          const e = document.createElement('div');\n          e.textContent = 'As well as regular HTMLElements';\n          return e;\n        })()\n      )\n    )\n  );\n}\n","import { SourceCode } from '../shared/SourceCode';\nimport { readFileSync } from 'fs';\n\nimport { ez, EZDiv } from 'ez-elements';\nimport { ExampleHolder } from '../shared/ExampleHolder';\nimport { BasicEZElementsExample } from './BasicEZElementsExample';\n\nexport function BasicEZElementsExampleWrapper(holder: EZDiv) {\n  holder.append(\n    ez('h3').setTextContent('Basic EZElements'),\n    ez('p').append(\n      'How to create elements using ',\n      ez('code').append('new EZElement(tag)'),\n      ', ',\n      ez('code').append('ez(tag)'),\n      ', ',\n      ez('code').append('new EZDiv()'),\n      ', and ',\n      ez('code').append('new EZSpan()')\n    ),\n\n    ExampleHolder(BasicEZElementsExample()),\n\n    SourceCode({\n      'BasicEZElementsExample.ts': readFileSync(\n        __dirname + '/BasicEZElementsExample.ts',\n        'utf-8'\n      )\n    })\n  );\n}\n","import { ez, EZDiv } from \"ez-elements\";\nimport { ShadowExampleWrapper } from \"./shadow-example/ShadowExampleWrapper\";\nimport { ButtonExampleWrapper } from \"./button-example/ButtonExampleWrapper\";\nimport { JSXExampleWrapper } from \"./jsx-example/JSXExampleWrapper\";\nimport { EZButtonExampleWrapper } from \"./ez-button-example/EZButtonExampleWrapper\";\nimport { EZButtonSubclassExampleWrapper } from \"./ez-button-subclass-example/EZButtonSubclassExampleWrapper\";\nimport { EZTextInputExampleWrapper } from \"./ez-textinput-example/EZTextInputExampleWrapper\";\nimport { BasicEZElementsExampleWrapper } from \"./basic-ezelements/BasicEZElementsExampleWrapper\";\n\nconst examples: { [key: string]: (holder: EZDiv) => void } = {\n  'Basic EZElements': BasicEZElementsExampleWrapper,\n  'Button': ButtonExampleWrapper,\n  'EZButton': EZButtonExampleWrapper,\n  'EZButton Subclass': EZButtonSubclassExampleWrapper,\n  'EZTextInput': EZTextInputExampleWrapper,\n  'Shadow': ShadowExampleWrapper,\n  'JSX': JSXExampleWrapper,\n};\n\nlet buttonsHolder = ez('div').addStyles({\n  marginBottom: '10px',\n});\nlet exampleHolder = ez('div');\n\nfunction loadExample(exampleName: string) {\n  if (exampleName === '') {\n    exampleHolder.setTextContent('Pick an example');\n    return;\n  }\n\n  // Clear the example holder\n  exampleHolder.setTextContent('');\n  const example = examples[exampleName];\n  if (example) {\n    example(exampleHolder);\n  } else {\n    exampleHolder.setTextContent(`Example not found for \"${exampleName}\"`);\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  buttonsHolder.appendTo(document.body);\n  exampleHolder.appendTo(document.body);\n\n  for (let i in examples) {\n    ez('a')\n      .addStyles({\n        padding: '10px',\n        margin: '5px',\n      })\n      .setTextContent(i)\n      .setAttribute('href', `#${i}`)\n      .appendTo(buttonsHolder);\n  }\n\n  loadExample(decodeURIComponent(window.location.hash.substring(1)));\n});\n\nwindow.addEventListener('hashchange', () => {\n  loadExample(decodeURIComponent(window.location.hash.substring(1)));\n});\n"]}